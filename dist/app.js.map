{"version":3,"sources":["app.js"],"names":[],"mappings":";;AAAA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;AAEA,IAAI,YAAY,wBACZ,CAAC,8BAAD,CADY,EAEZ,CAAC,gCAAD,EAAyB,kCAAzB,CAFY,CAAhB;AAGA,IAAI,aAAa,yBAAe,SAAf,CAAjB;;AAEA,IAAI,OAAO,QAAQ,sBAAR,CAAX;;AAEA,IAAI,eAAe,EAAnB;AACA,KAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,QAAL,CAAc,MAAlC,EAA0C,GAA1C,EAA+C;AAC7C,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,QAAL,CAAc,CAAd,EAAiB,QAAjB,CAA0B,MAA9C,EAAsD,GAAtD,EAA2D;;AAEzD,eAAW,kBAAX,CAA8B,KAAK,QAAL,CAAc,CAAd,EAAiB,QAAjB,CAA0B,CAA1B,CAA9B;;AAEA,QAAI,SAAS,EAAb;AACA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,QAAL,CAAc,MAAlC,EAA0C,GAA1C,EAA+C;AAC7C,aAAO,CAAP,IAAY,MAAM,CAAN,GAAU,CAAV,GAAc,CAA1B;AACD;;AAED,iBAAa,IAAb,CAAkB;AAChB,cAAQ,KAAK,QAAL,CAAc,CAAd,EAAiB,QAAjB,CAA0B,CAA1B,CADQ;AAEhB,cAAQ;AAFQ,KAAlB;AAID;AACF;;AAED,IAAI,QAAQ,qBAAZ;;AAEA,MAAM,KAAN,CAAY,YAAZ,EAA0B,UAA1B,EAAsC,KAAK,QAA3C;;AAEA,IAAI,SAAS,QAAQ,gBAAR,CAAb;AACA,IAAI,SAAS,qBAAW,KAAX,CAAb;;AAEA,OAAO,OAAP,CAAe,OAAO,OAAP,CAAe,KAA9B","file":"app.js","sourcesContent":["import { install } from 'source-map-support';\nimport './commands/test';\nimport Jarvis from './Jarvis';\nimport Tokenizer from './Learning/Tokenizer';\nimport Vocabulary from './Learning/Vocabulary';\nimport StopwordFilter from './Learning/Filter/StopwordFilter';\nimport Decapitalization from './Learning/Transformer/Decapitalization';\nimport PunctuationRemoval from './Learning/Transformer/PunctuationRemoval';\nimport Model from './Learning/Model';\n\ninstall();\n\nlet tokenizer = new Tokenizer(\n    [new StopwordFilter()],\n    [new Decapitalization(), new PunctuationRemoval()]);\nlet vocabulary = new Vocabulary(tokenizer);\n\nlet data = require('../data/phrases.json');\n\nlet trainingData = [];\nfor (let i = 0; i < data.Commands.length; i++) {\n  for (let j = 0; j < data.Commands[i].Examples.length; j++) {\n\n    vocabulary.addTokenFromPhrase(data.Commands[i].Examples[j]);\n\n    let output = [];\n    for (let k = 0; k < data.Commands.length; k++) {\n      output[k] = i === k ? 1 : 0;\n    }\n\n    trainingData.push({\n      phrase: data.Commands[i].Examples[j],\n      output: output,\n    });\n  }\n}\n\nvar model = new Model();\n\nmodel.train(trainingData, vocabulary, data.Commands);\n\nlet config = require('../config.json');\nlet jarvis = new Jarvis(model);\n\njarvis.connect(config.Discord.Token);\n"],"sourceRoot":"d:\\Workspace\\jkgaming\\jarvis\\src"}