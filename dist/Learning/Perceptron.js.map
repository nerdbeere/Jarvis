{"version":3,"sources":["Learning/Perceptron.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;IAEM,U;AAEJ,sBAAY,KAAZ,EAAmB,MAAnB,EAA2B,MAA3B,EAAmC;AAAA;;AAEjC,SAAK,QAAL,GAAgB,uBAAhB;;AAEA,QAAI,aAAa,oBAAU,KAAV,CAAjB;AACA,QAAI,cAAc,oBAAU,MAAV,CAAlB;AACA,QAAI,cAAc,oBAAU,MAAV,CAAlB;;AAEA,eAAW,OAAX,CAAmB,WAAnB;AACA,gBAAY,OAAZ,CAAoB,WAApB;;AAEA,SAAK,QAAL,CAAc,GAAd,CAAkB;AAChB,aAAO,UADS;AAEhB,cAAQ,CAAC,WAAD,CAFQ;AAGhB,cAAQ;AAHQ,KAAlB;;AAMA,SAAK,QAAL,GAAgB,sBAAY,KAAK,QAAjB,CAAhB;AACD;;;;0BAEK,Y,EAAc;AAClB,WAAK,QAAL,CAAc,KAAd,CAAoB,YAApB,EAAkC;AAChC,cAAM,EAD0B;AAEhC,oBAAY,MAFoB;AAGhC,eAAO,IAHyB;AAIhC,iBAAS,IAJuB;AAKhC,aAAK,IAL2B;AAMhC,cAAM,kBAAQ,IAAR,CAAa;AANa,OAAlC;AAQD;;;6BAEQ,M,EAAQ;AACf,aAAO,KAAK,QAAL,CAAc,QAAd,CAAuB,MAAvB,CAAP;AACD;;;;;;kBAIY,U","file":"Learning/Perceptron.js","sourcesContent":["import { Network, Layer, Trainer } from 'synaptic';\n\nclass Perceptron {\n\n  constructor(input, hidden, output) {\n\n    this._network = new Network();\n\n    let inputLayer = new Layer(input);\n    let hiddenLayer = new Layer(hidden);\n    let outputLayer = new Layer(output);\n\n    inputLayer.project(hiddenLayer);\n    hiddenLayer.project(outputLayer);\n\n    this._network.set({\n      input: inputLayer,\n      hidden: [hiddenLayer],\n      output: outputLayer,\n    });\n\n    this._trainer = new Trainer(this._network);\n  }\n\n  train(trainingsSet) {\n    this._trainer.train(trainingsSet, {\n      rate: .1,\n      iterations: 100000,\n      error: .005,\n      shuffle: true,\n      log: 1000,\n      cost: Trainer.cost.CROSS_ENTROPY,\n    });\n  }\n\n  activate(vector) {\n    return this._network.activate(vector);\n  }\n\n}\n\nexport default Perceptron;\n"],"sourceRoot":"d:\\Workspace\\jkgaming\\jarvis\\src"}